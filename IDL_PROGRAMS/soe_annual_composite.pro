; $ID:	SOE_ANNUAL_COMPOSITE.PRO,	2020-12-30-17,	USER-KJWH	$
  PRO SOE_ANNUAL_COMPOSITE, VERSION, DATFILE=DATFILE, DIR_DATA=DIR_DATA, DIR_PLOTS=DIR_PLOTS, OVERWRITE=OVERWRITE, BUFFER=BUFFER

;+
; NAME:
;   SOE_ANNUAL_COMPOSITE
;
; PURPOSE:
;   Make annual composite images and plots of the SOE data
;
; CATEGORY:
;   SOE Project
;
; CALLING SEQUENCE:
;   SOE_ANNUAL_COMPOSITE, VERSION, OVERWRITE=OVERWRITE
;
; REQUIRED INPUTS:
;   VERSION......... The SOE Version
;
; OPTIONAL INPUTS:
;   DATFILE......... The file containing the extracted data
;   DIR_DATA........ The directory for the input DATFILE
;   DIR_PLOTS....... The output directory for the composite plots
;
; KEYWORD PARAMETERS:
;   OVERWRITE....... Overwrite existing files if they exist
;   BUFFER.......... Turns on [0] or off [1] the plotting screen
;
; OUTPUTS:
;   OUTPUT.......... Images and plots of the SOE timeseries data
;
; OPTIONAL OUTPUTS:
;   None
;
; COMMON BLOCKS: 
;   None
;
; SIDE EFFECTS:  
;   None
;
; RESTRICTIONS:  
;   None
;
; EXAMPLE:
; 
; NOTES:
;   
; COPYRIGHT: 
; Copyright (C) 2020, Department of Commerce, National Oceanic and Atmospheric Administration, National Marine Fisheries Service,
;   Northeast Fisheries Science Center, Narragansett Laboratory.
;   This software may be used, copied, or redistributed as long as it is not sold and this copyright notice is reproduced on each copy made.
;   This routine is provided AS IS without any express or implied warranties whatsoever.
;
; AUTHOR:
;   This program was written on December 30, 2020 by Kimberly J. W. Hyde, Northeast Fisheries Science Center | NOAA Fisheries | U.S. Department of Commerce, 28 Tarzwell Dr, Narragansett, RI 02882
;    
; MODIFICATION HISTORY:
;   Dec 30, 2020 - KJWH: Initial code written
;   Dec 20, 2021 - KJWH: Added V2022 info
;                        Added BUFFER keyword
;                        Changed subscript () to []
;-
; ****************************************************************************************************
  ROUTINE_NAME = 'SOE_ANNUAL_COMPOSITE'
  COMPILE_OPT IDL2
  SL = PATH_SEP()
  
  IF NONE(VERSION)   THEN MESSAGE, 'ERROR: Must provide the SOE VERSION'  
  
  FOR V=0, N_ELEMENTS(VERSION)-1 DO BEGIN
    VER = VERSION[V]
    VERSTR = SOE_VERSION_INFO(VER)
    CHLSTR = VERSTR.PROD_INFO.CHLOR_A & CHL = CHLSTR.PROD
    PPDSTR = VERSTR.PROD_INFO.PPD     & PPD = PPDSTR.PROD
    DATASETS = CHLSTR.DATASET & IF CHLSTR.DATASET NE PPDSTR.DATASET THEN MESSAGE, 'ERROR: CHL and PPD datasets are not the same'
    DR = VERSTR.INFO.DATERANGE  & TDR = VERSTR.INFO.TEMP_DATERANGE & TYR = STRMID(TDR[1],0,4)
    OMAP = VERSTR.INFO.MAP_OUT
    TDATASET = CHLSTR.TEMP_DATASET & IF CHLSTR.TEMP_DATASET NE PPDSTR.TEMP_DATASET THEN MESSAGE, 'ERROR: CHL and PPD TEMP datasets are not the same'
        
    IF NONE(DIR_DATA)  THEN DIR_DATA  = VERSTR.DIRS.DIR_EXTRACTS 
    IF NONE(DIR_PLOTS) THEN DIR_PLOTS = VERSTR.DIRS.DIR_COMP + 'ANNUAL_COMPOSITES' + SL & DIR_TEST, DIR_PLOTS
    IF NONE(DATFILE)   THEN DATFILE   = VERSTR.INFO.DATAFILE
    
    PRODS = [CHL,PPD] & SPROD = CHL & PPROD = PPD
    PERIODS = ['A','M']
    TXT_TAGS = [];['PERIOD','MATH']
    YEARS = YEAR_RANGE(DR[0],DR[1],/STRING)

    AFILES = GET_FILES(DATASETS,PRODS=PRODS,PERIODS='A',DATERANGE=DR,FILE_TYPE=['STATS','ANOMS'])
    TFILES = GET_FILES(TDATASET,PRODS=[CHLSTR.TEMP_PROD,PPDSTR.TEMP_PROD],PERIODS='A',DATERANGE=TYR,FILE_TYPE=['STATS','ANOMS'])
    FA = PARSE_IT(AFILES,/ALL)

    STRUCT = IDL_RESTORE(DATFILE)
    STRUCT = STRUCT[WHERE(STRUCT.PERIOD_CODE EQ 'M' OR STRUCT.PERIOD_CODE EQ 'A')]
    TSTR   = STRUCT[WHERE(STRUCT.SENSOR EQ CHLSTR.TEMP_DATASET,/NULL)]
    CSTR   = STRUCT[WHERE(STRUCT.SENSOR EQ CHLSTR.DATASET AND STRUCT.PROD+'-'+STRUCT.ALG EQ CHL,/NULL)]
    PSTR   = STRUCT[WHERE(STRUCT.SENSOR EQ PPDSTR.DATASET AND STRUCT.PROD+'-'+STRUCT.ALG EQ PPD,/NULL)]
    STRUCT = [CSTR,PSTR,TSTR]

    OK_RATIO = WHERE_STRING(STRUCT.MATH,'RATIO',COUNT)
    IF COUNT GT 0 THEN STRUCT[OK_RATIO].PROD = STRUCT[OK_RATIO].PROD + '_RATIO'   ; Rename the RATIO prods
    FOR S=0, N_ELEMENTS(DATASETS)-1 DO BEGIN
      SEN = DATASETS[S]
     ; STRUCT = STRUCT[WHERE(STRUCT.SENSOR EQ SEN,COUNT,/NULL)]
     ; IF STRUCT EQ [] THEN MESSAGE, 'ERROR: ' + SEN + ' data not found in the data structure.'
      
      FOR N=0, N_ELEMENTS(YEARS)-1 DO BEGIN
        YR = YEARS[N]
        IF YR EQ '1997' THEN CONTINUE
        
        MSTR = STRUCT[WHERE(STRUCT.PERIOD_CODE EQ 'M',/NULL)]
        ASTR = STRUCT[WHERE(STRUCT.PERIOD_CODE EQ 'A',/NULL)]
        
        PERIOD = 'A_'+YR
        CS = AFILES[WHERE(FA.PERIOD EQ PERIOD AND FA.PROD EQ 'CHLOR_A' AND FA.MATH EQ 'STATS' AND FA.SENSOR EQ SEN,/NULL)]
        CA = AFILES[WHERE(FA.PERIOD EQ PERIOD AND FA.PROD EQ 'CHLOR_A' AND FA.MATH EQ 'ANOM'  AND FA.SENSOR EQ SEN,/NULL)]
        PS = AFILES[WHERE(FA.PERIOD EQ PERIOD AND FA.PROD EQ 'PPD'     AND FA.MATH EQ 'STATS' AND FA.SENSOR EQ SEN,/NULL)]
        PA = AFILES[WHERE(FA.PERIOD EQ PERIOD AND FA.PROD EQ 'PPD'     AND FA.MATH EQ 'ANOM'  AND FA.SENSOR EQ SEN,/NULL)]

        IF YR EQ TYR THEN stop
        
        IF ~ANY([CS,CA,PS,PA]) THEN CONTINUE
        PNGFILE = DIR_PLOTS + 'A_' + YR + '-' + SEN + '-' + SPROD + '-' + PPROD + '-DATA_COMPOSITE.PNG'
        IF FILE_MAKE([CS,CA,PS,PA,DATFILE],PNGFILE) EQ 0 THEN CONTINUE

        WIDTH = 1100
        HEIGHT = 850
        NROW = 3
        NCOL = 4
        EDGE = 0.01
        SP = 0.005
        GAP = 0.05
        DIF = (1-(2*EDGE)-(NROW*SP))/NCOL
        PIXDIF = WIDTH * DIF
        CB = 0.025
        TP = 0.95
        TPPIX = TP * HEIGHT
        BTPIX = TPPIX-PIXDIF
        BT = BTPIX/HEIGHT
        Y2 = BT-CB-GAP
        Y1 = .32;(BTPIX-PIXDIF/.7)/HEIGHT
        Y4 = Y1-GAP
        Y3 = Y4-(Y2-Y1)
        LF = EDGE + FINDGEN(4)*(DIF+SP)
        RT = LF + DIF
        X1 = LF+SP*5
        X2 = RT-SP*2

        ADD_CB = 1
        CB_TYPE = 3
        CB_FONT = 12
        CB_RELATIVE = 0

        CSPROD = CHLSTR.PROD_SCALE & CSTITLE = '$Chlorophyll \ita\rm$' + ' ' + UNITS('CHLOR_A',/NO_NAME)  & CSPAL = CHLSTR.PAL
        CAPROD = CHLSTR.ANOM_SCALE & CATITLE = 'CHL Ratio Anomaly'                                        & CAPAL = CHLSTR.ANOM_PAL
        PSPROD = PPDSTR.PROD_SCALE & PSTITLE = 'Primary Production '   + UNITS('PPD',/NO_NAME)            & PSPAL = PPDSTR.PAL
        PAPROD = PPDSTR.ANOM_SCALE & PATITLE = 'PP Ratio Anomaly'                                         & PAPAL = PPDSTR.ANOM_PAL

        W = WINDOW(DIMENSIONS=[WIDTH,HEIGHT],BUFFER=BUFFER)

        IF CS NE [] THEN PRODS_2PNG,CS,TAG='GMEAN',MAPP=OMAP,PROD=CSPROD,OUTLINE=EPU_OUTLINE,OUT_COLOR=0,OUT_THICK=4,CB_TITLE=CSTITLE,TXT_TAGS=TXT_TAGS,VERBOSE=VERBOSE,/CURRENT,IMG_POS=[LF[0],BT,RT[0],TP],/ADD_CB,CB_POS=[LF[0]+SP*2,BT-CB,RT[0]-SP*2,BT-SP],CB_TYPE=CB_TYPE,CB_RELATIVE=CB_RELATIVE,PAL=CSPAL
        IF CA NE [] THEN PRODS_2PNG,CA,MAPP=OMAP,PROD=CAPROD,OUTLINE=EPU_OUTLINE,OUT_COLOR=0,OUT_THICK=4,CB_TITLE=CATITLE,TXT_TAGS=TXT_TAGS,VERBOSE=VERBOSE,/CURRENT,IMG_POS=[LF[1],BT,RT[1],TP],/ADD_CB,CB_POS=[LF[1]+SP*2,BT-CB,RT[1]-SP*2,BT-SP],CB_TYPE=CB_TYPE,CB_RELATIVE=CB_RELATIVE,PAL=CAPAL
        IF PS NE [] THEN PRODS_2PNG,PS,TAG='GMEAN',MAPP=OMAP,PROD=PSPROD,OUTLINE=EPU_OUTLINE,OUT_COLOR=0,OUT_THICK=4,CB_TITLE=PSTITLE,TXT_TAGS=TXT_TAGS,VERBOSE=VERBOSE,/CURRENT,IMG_POS=[LF[2],BT,RT[2],TP],/ADD_CB,CB_POS=[LF[2]+SP*2,BT-CB,RT[2]-SP*2,BT-SP],CB_TYPE=CB_TYPE,CB_RELATIVE=CB_RELATIVE,PAL=PSPAL
        IF PA NE [] THEN PRODS_2PNG,PA,MAPP=OMAP,PROD=PAPROD,OUTLINE=EPU_OUTLINE,OUT_COLOR=0,OUT_THICK=4,CB_TITLE=PATITLE,TXT_TAGS=TXT_TAGS,VERBOSE=VERBOSE,/CURRENT,IMG_POS=[LF[3],BT,RT[3],TP],/ADD_CB,CB_POS=[LF[3]+SP*2,BT-CB,RT[3]-SP*2,BT-SP],CB_TYPE=CB_TYPE,CB_RELATIVE=CB_RELATIVE,PAL=PAPAL
        T = TEXT(0.5,0.975,YR,ALIGN=0.5,VERTICAL_ALIGN=0.5,FONT_SIZE=20,FONT_STYLE='BOLD')

        PRODS = ['CHLOR_A','CHLOR_A_RATIO','PPD','PPD_RATIO']
        MR1   = [0.0,0.5,0.0,0.5]
        MR2   = [2.0,2.25,1.6,2.0]
        MTKS  = LIST('',[0.5,0.75,1,1.5,2.0],'',[0.5,0.75,1.0,1.5,2.0])
        MYMJR = [5,5,4,5]
        YR1   = [0.4,0.65,0.4,0.8]
        YR2   = [1.2,1.58,1.0,1.26]
        YTKS  = LIST('',[0.65,0.8,1,1.2,1.5],'',[0.8,0.9,1.0,1.111,1.25])
        YYMJR = [5,5,4,5]
        LOGS  = [0,1,0,1]
        TAGS  = ['GSTATS_GMEAN','AMEAN','GSTATS_GMEAN','AMEAN']
        CLRS  = ['BLUE','CYAN','RED','SPRING_GREEN']
        EPUS  = ['GOM','GB','MAB']
        THICK = 3
        AX = DATE_AXIS([210001,210012],/MONTH,/FYEAR,STEP=1,ROOM=1)
        AX.TICKNAME[0] = '' & AX.TICKNAME[-1] = ''
        FOR D=0, N_ELEMENTS(PRODS) -1 DO BEGIN
          FOR R=0, N_ELEMENTS(EPUS)-1 DO BEGIN
            POSITION=[X1[D],Y1,X2[D],Y2]
            STR = MSTR[WHERE(MSTR.PROD EQ PRODS[D] AND MSTR.SUBAREA EQ EPUS[R] AND DATE_2YEAR(PERIOD_2DATE(MSTR.PERIOD)) EQ YR,/NULL,COUNTM)] & IF COUNTM GT 12 THEN STOP
            MDATE = DATE_2JD('2100'+DATE_2MONTH(PERIOD_2DATE(STR.PERIOD)))
            RDATA = GET_TAG(STR,TAGS[D])
            LDATA = LOWESS(DATE_2MONTH(PERIOD_2DATE(STR.PERIOD)),RDATA,WIDTH=7)
            IF HAS(PRODS[D],'RATIO') THEN YTICKS = MTKS[D] ELSE YTICKS = []
            P0 = PLOT(MDATE,RDATA,YLOG=LOGS[D],/NODATA,/CURRENT,POSITION=POSITION,OVERPLOT=R,XRANGE=AX.JD,YRANGE=[MR1[D],MR2[D]],XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,XMINOR=0,XSTYLE=1,YMAJOR=MYMJR[D],YTICKV=YTICKS)
            XRANGE = P0.XRANGE
            IF HAS(PRODS[D],'RATIO') THEN PL = PLOT(XRANGE,[1,1],/OVERPLOT,COLOR='BLACK',THICK=3,TRANSPARENCY=90)
            P1 = PLOT(MDATE,RDATA,YLOG=LOGS[D],COLOR=CLRS[R],/CURRENT,POSITION=POSITION,/OVERPLOT,THICK=THICK,LINESTYLE=6,SYM_SIZE=0.25,SYMBOL='CIRCLE',SYM_FILLED=1);,XRANGE=AX.JD,YRANGE=[MR1[D],MR2[D]],XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,XMINOR=0,XSTYLE=1)
            P2 = PLOT(MDATE,LDATA,YLOG=LOGS[D],COLOR=CLRS[R],/CURRENT,POSITION=POSITION,/OVERPLOT,THICK=THICK);XRANGE=AX.JD,YRANGE=[MR1[D],MR2[D]],XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,XMINOR=0,XSTYLE=1)
            IF D EQ 0 THEN T = TEXT(POSITION[0]+0.01,POSITION[3]-0.03-(R*0.015),EPUS[R],COLOR=CLRS[R],TARGET=P0,/NORMAL,FONT_SIZE=10)
          ENDFOR
        ENDFOR

        AX = DATE_AXIS([YEARS[0],YEARS[-1]],/YEAR,/YY_YEAR,STEP=2,ROOM=2)
        AX.TICKNAME[0] = '' & AX.TICKNAME[-1] = ''
        FOR D=0, N_ELEMENTS(PRODS) -1 DO BEGIN
          FOR R=0, N_ELEMENTS(EPUS)-1 DO BEGIN
            POSITION=[X1[D],Y3,X2[D],Y4]
            STR = ASTR[WHERE(ASTR.PROD EQ PRODS[D] AND ASTR.SUBAREA EQ EPUS[R],/NULL)]
            YST = STR[WHERE(STR.PERIOD EQ PERIOD,/NULL)]
            RDATA = GET_TAG(STR,TAGS[D])
            LDATA = LOWESS(DATE_2YEAR(PERIOD_2DATE(STR.PERIOD)),RDATA,WIDTH=7)
            IF HAS(PRODS[D],'RATIO') THEN YTICKS = YTKS[D] ELSE YTICKS = []
            P0 = PLOT(MDATE,RDATA,YLOG=LOGS[D],/NODATA,/CURRENT,POSITION=POSITION,OVERPLOT=R,XRANGE=AX.JD,YRANGE=[YR1[D],YR2[D]],XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,XMINOR=0,XSTYLE=1,YMAJOR=YYMJR[D],YTICKV=YTICKS,YSTYLE=1)
            XRANGE = P0.XRANGE
            PL = PLOT(PERIOD_2JD([YST.PERIOD,YST.PERIOD]),[YR1[D],YR2[D]],COLOR='YELLOW',THICK=THICK*1.5,/OVERPLOT,TRANSPARENCY=90)
            IF HAS(PRODS[D],'RATIO') THEN PL = PLOT(XRANGE,[1,1],/OVERPLOT,COLOR='BLACK',THICK=3,TRANSPARENCY=90)
            P1 = PLOT(PERIOD_2JD(STR.PERIOD),RDATA,YLOG=LOGS[D],COLOR=CLRS[R],/CURRENT,POSITION=POSITION,/OVERPLOT,THICK=THICK,LINESTYLE=6,SYM_SIZE=0.25,SYMBOL='CIRCLE',SYM_FILLED=1);,XRANGE=AX.JD,YRANGE=[YR1[D],YR2[D]],XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,XMINOR=1,XSTYLE=1)
            P2 = PLOT(PERIOD_2JD(STR.PERIOD),LDATA,YLOG=LOGS[D],COLOR=CLRS[R],/CURRENT,POSITION=POSITION,/OVERPLOT,THICK=THICK);,XRANGE=AX.JD,YRANGE=[YR1[D],YR2[D]],XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,XMINOR=1,XSTYLE=1)
          ENDFOR
        ENDFOR
        PFILE, PNGFILE
        W.SAVE, PNGFILE
        W.CLOSE
      ENDFOR ; YEARS
    ENDFOR ; DATASETS
  ENDFOR ; VERSIONS
END ; ***************** End of SOE_ANNUAL_COMPOSITE *****************
