; $ID:	SOE_PHYTOSIZE_PLOT.PRO,	2020-12-31-15,	USER-KJWH	$
  PRO SOE_PHYTOSIZE_PLOT, VERSION, DIR_PLOTS=DIR_PLOTS, DATFILE=DATFILE, BUFFER=BUFFER

;+
; NAME:
;   SOE_PHYTOSIZE_PLOT
;
; PURPOSE:
;   $PURPOSE$
;
; CATEGORY:
;   $CATEGORY$
;
; CALLING SEQUENCE:
;   Result = SOE_PHYTOSIZE_PLOT($Parameter1$, $Parameter2$, $Keyword=Keyword$, ...)
;
; REQUIRED INPUTS:
;   Parm1.......... Describe the positional input parameters here. 
;
; OPTIONAL INPUTS:
;   Parm2.......... Describe optional inputs here. If none, delete this section.
;
; KEYWORD PARAMETERS:
;   KEY1........... Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
; OUTPUTS:
;   OUTPUT.......... Decribe the output of this program or function
;
; OPTIONAL OUTPUTS:
;   None
;
; COMMON BLOCKS: 
;   None
;
; SIDE EFFECTS:  
;   None
;
; RESTRICTIONS:  
;   None
;
; EXAMPLE:
; 
;
; NOTES:
;   $Citations or any other useful notes$
;   
; COPYRIGHT: 
; Copyright (C) 2020, Department of Commerce, National Oceanic and Atmospheric Administration, National Marine Fisheries Service,
;   Northeast Fisheries Science Center, Narragansett Laboratory.
;   This software may be used, copied, or redistributed as long as it is not sold and this copyright notice is reproduced on each copy made.
;   This routine is provided AS IS without any express or implied warranties whatsoever.
;
; AUTHOR:
;   This program was written on December 31, 2020 by Kimberly J. W. Hyde, Northeast Fisheries Science Center | NOAA Fisheries | U.S. Department of Commerce, 28 Tarzwell Dr, Narragansett, RI 02882
;    
; MODIFICATION HISTORY:
;   Dec 31, 2020 - KJWH: Initial code written
;-
; ****************************************************************************************************
  ROUTINE_NAME = 'SOE_PHYTOSIZE_PLOT'
  COMPILE_OPT IDL2
  SL = PATH_SEP()

  IF NONE(VERSION) THEN MESSAGE, 'ERROR: Must provide the SOE VERSION'
  IF NONE(BUFFER) THEN BUFFER=0
  
  CLRS = LIST([217,241,253],[193,232,251],[0,173,238],[0,83,159],[37,64,143],[255,255,255])
  CLRS  = LIST([0,70,127],[147,213,0],[255,131,0],[0,147,208],[30,202,211],[127,127,255],[0,121,52],[76,156,35])
  CLRS = ['BLACK','MEDIUM_SEA_GREEN','CORAL','DEEP_SKY_BLUE']

  
  FOR V=0, N_ELEMENTS(VERSION)-1 DO BEGIN
    VER = VERSION[V]
    VERSTR = SOE_VERSION_INFO(VER)
    IF NONE(DIR_PLOTS) THEN DIR_PLT = VERSTR.DIRS.DIR_PLOTS ELSE DIR_PLT = DIR_PLOTS & DIR_TEST, DIR_PLT
    NAMES = VERSTR.INFO.SUBAREA_NAMES
    TITLES = VERSTR.INFO.SUBAREA_TITLES
    MP = VERSTR.INFO.MAP_OUT

    CASE VER OF
      'V2021': BEGIN & COMP_PERIOD='ANNUAL' & PLOT_PERIOD=['WEEK','MONTH'] & MOV_PERIOD = ['WEEK','MONTH'] & END
    ENDCASE
    
    FOR R=0, N_ELEMENTS(PLOT_PERIOD)-1 DO BEGIN
      PER = PLOT_PERIOD[R]
      CASE PER OF
        'WEEK': NDATES = 52
        'MONTH': NDATES = 12
      ENDCASE
      
      IF NONE(DATFILE) THEN DATFILE = VERSTR.INFO.DATAFILE
      PNGFILE = DIR_PLT + PER + '-' + VERSTR.INFO.SHAPEFILE + '-' + 'PHYTOSIZE-' + 'SEASONAL_CLIMATOLOGY.png'
      IF FILE_MAKE(DATFILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
      STRUCT = IDL_RESTORE(DATFILE)
    
      NPLOTS = N_ELEMENTS(NAMES)
      FONTSIZE = 12
      YTITLE = 'Phytoplankton Size Fraction'
      CRANGE = [0,2]
      SP = 0.03
      X1 = 0.08
      X2 = 0.9
      YS = (1.0-(SP*(NPLOTS+2)))/NPLOTS
      BT = 0.08
      IF N_ELEMENTS(NAMES) EQ 1 THEN Y1 = 0.1 ELSE Y1 = BT
      IF N_ELEMENTS(NAMES) EQ 1 THEN Y2 = 0.9 ELSE Y2 = BT+YS
      IF NONE(XDIM)      THEN XDIM = 850
      IF NONE(YDIM)      THEN YDIM = 300 * N_ELEMENTS(NAMES) < 256*6
  
      W = WINDOW(DIMENSIONS=[XDIM,YDIM],BUFFER=BUFFER)
            
      FOR N=0, N_ELEMENTS(NAMES)-1 DO BEGIN ; Subareas
        ANAME = NAMES[N]
        TITLE = TITLES[N]        
      
        MST = STRUCT[WHERE(STRUCT.PROD EQ 'MICRO_PERCENTAGE' AND STRUCT.PERIOD_CODE EQ PER AND STRUCT.SUBAREA EQ ANAME,/NULL)] 
        NST = STRUCT[WHERE(STRUCT.PROD EQ 'NANO_PERCENTAGE'  AND STRUCT.PERIOD_CODE EQ PER AND STRUCT.SUBAREA EQ ANAME,/NULL)]
        PST = STRUCT[WHERE(STRUCT.PROD EQ 'PICO_PERCENTAGE'  AND STRUCT.PERIOD_CODE EQ PER AND STRUCT.SUBAREA EQ ANAME,/NULL)]
        CHL = STRUCT[WHERE(STRUCT.PROD EQ 'CHLOR_A'          AND STRUCT.PERIOD_CODE EQ PER AND STRUCT.SUBAREA EQ ANAME,/NULL)]
        
        MST = STRUCT_SORT(MST, TAGNAMES='PERIOD')
        NST = STRUCT_SORT(NST, TAGNAMES='PERIOD')
        PST = STRUCT_SORT(PST, TAGNAMES='PERIOD')
        CHL = STRUCT_SORT(CHL, TAGNAMES='PERIOD') & UN = UNIQ(CHL.NAME) & CHL = CHL[UN]
        
        MDT = PERIOD_2STRUCT(MST.PERIOD) & IF N_ELEMENTS(MDT) NE NDATES THEN MESSAGE, 'ERROR: The number of dates is incorrect...'
        NDT = PERIOD_2STRUCT(NST.PERIOD) & IF N_ELEMENTS(NDT) NE NDATES THEN MESSAGE, 'ERROR: The number of dates is incorrect...'
        PDT = PERIOD_2STRUCT(PST.PERIOD) & IF N_ELEMENTS(PDT) NE NDATES THEN MESSAGE, 'ERROR: The number of dates is incorrect...'
        CDT = PERIOD_2STRUCT(CHL.PERIOD) & IF N_ELEMENTS(CDT) NE NDATES THEN MESSAGE, 'ERROR: The number of dates is incorrect...'
        
        IF PER EQ 'MONTH' THEN FDT = '2100'+MDT.MONTH_START+'15' ELSE FDT = '2100'+MDT.MONTH_START+MDT.DAY_START
        XX  = [DATE_2JD(FDT),REVERSE(DATE_2JD(FDT))]
        AX = DATE_AXIS([FDT[0],FDT[-1]],/FYEAR,/MID)
        XTICKNAMES = REPLICATE(' ',N_ELEMENTS(AX.TICKNAME))
        
        BOT = REPLICATE(0.0,NDATES)
        MY = [BOT,REVERSE(MST.MED)]
        NY = [MST.MED,REVERSE(MST.MED+NST.MED)]
        PY = [MST.MED+NST.MED,REPLICATE(1.0,NDATES)]    
        YRANGE = NICE_RANGE([0,1])
        
        IF N GT 0 THEN Y1 = Y1 + YS + SP
        IF N GT 0 THEN Y2 = Y2 + YS + SP
        POSITION = [X1,Y1,X2,Y2]
        
        IF N EQ 0 THEN XTICKNAME=AX.TICKNAME ELSE XTICKNAME=XTICKNAMES     
        PD = PLOT(AX.JD,YRANGE,YTITLE=YTITLE,AXIS_STYLE=1,FONT_SIZE=FONTSIZE,YMINOR=YMINOR,XRANGE=AX.JD,XMAJOR=AX.TICKS,XMINOR=3,XTICKNAME=XTICKNAME,XTICKVALUES=AX.TICKV,POSITION=POSITION,/NODATA,/CURRENT)
        POS = PD.POSITION
        XTICKV = PD.XTICKVALUES & OK = WHERE(JD_2MONTH(XTICKV) EQ '01',COUNT)
        POLYM = POLYGON(XX,MY,FILL_COLOR=CLRS[1],/FILL_BACKGROUND,TARGET=PD,/DATA,LINESTYLE=6)
        POLYN = POLYGON(XX,NY,FILL_COLOR=CLRS[2],/FILL_BACKGROUND,TARGET=PD,/DATA,LINESTYLE=6)
        POLYN = POLYGON(XX,PY,FILL_COLOR=CLRS[3],/FILL_BACKGROUND,TARGET=PD,/DATA,LINESTYLE=6)
        
        P3 = PLOT(DATE_2JD(FDT),CHL.GSTATS_MED,YRANGE=CRANGE,COLOR='BLACK',THICK=3,LINESTYLE=0,/CURRENT,AXIS_STYLE=0,XSTYLE=1,POSITION=POS,XSHOWTEXT=1)
        A1 = AXIS('Y',TARGET=P3,LOCATION=[MAX(DATE_2JD(FDT)),0,0],TEXTPOS=1,TITLE=UNITS('CHLOROPHYLL'),TICKFONT_SIZE=11,TEXT_COLOR='BLACK',COLOR='BLACK',TICKLEN=0.02,YRANGE=CRANGE) ;AXIS,YAXIS=1,YRANGE=[0,300],/SAVE, YTITLE=YTITLE2,CHARSIZE=CHARSIZE,COLOR=0
        A2 = AXIS('X',TARGET=PD,LOCATION=[MIN(XX),1,0],MAJOR=0,MINOR=0);,COLOR=PL(252))  
        TA = TEXT(POS[0]+.02,POS[3]-0.03,ANAME,FONT_COLOR='BLACK',FONT_SIZE=FONTSIZE+4,FONT_STYLE='BOLD')
      ENDFOR ; DATASETS
      S = SYMBOL(0.21,0.03,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=CLRS[1],/SYM_FILLED,LABEL_STRING='Microplankton',LABEL_FONT_SIZE=FONTSIZE,LABEL_POSITION='R',/NORMAL)
      S = SYMBOL(0.42, 0.03,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=CLRS[2],/SYM_FILLED,LABEL_STRING='Nanoplankton',LABEL_FONT_SIZE=FONTSIZE,LABEL_POSITION='R',/NORMAL)
      S = SYMBOL(0.64,0.03,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=CLRS[3],/SYM_FILLED,LABEL_STRING='Picoplankton',LABEL_FONT_SIZE=FONTSIZE,LABEL_POSITION='R',/NORMAL)
      PRINT, 'Writing: ' + PNGFILE
      W.SAVE,PNGFILE,RESOLUTION=600
      W.CLOSE
    ENDFOR ; PLOT_PERIOD




; ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

; ===> Make annual composites
    VPRODS = TAG_NAMES(VERSTR.PROD_INFO)
    ALG = VALIDS('ALGS',VERSTR.PROD_INFO.MICRO.PROD)
    GROUP_PRODS = LIST([['MICRO','NANO','PICO']+'-'+ALG],[['MICRO','NANO','PICO']+'_PERCENTAGE-'+ALG])
    SCL_PRODS = ['CHLOR_A_0.01_10','NUM_0_0.8']
    CB_TITLES = [UNITS('CHLOROPHYLL'),'Fraction of Total ' + UNITS('CHLOROPHYLL',/NO_UNIT)]
    NTICKS = [10,8]
    PAL='PAL_DEFAULT'
    DCOLOR='WHITE'
    OUTLINE = VERSTR.INFO.SUBAREA_OUTLINE
    OCOLOR='BLACK'

    FOR C=0, N_ELEMENTS(COMP_PERIOD)-1 DO BEGIN
      PER = COMP_PERIOD[C]
      FOR G=0, N_ELEMENTS(GROUP_PRODS)-1 DO BEGIN
        SCL = SCL_PRODS[G]
        CB_TITLE = CB_TITLES[G]
        CB_TICKS = NTICKS[G]
        GPRODS = GROUP_PRODS[G]
        PSC = []
        DTSET = []
        FOR R=0, N_ELEMENTS(GPRODS)-1 DO BEGIN
          GPR = VALIDS('PRODS',GPRODS[R])
          OK = WHERE(VPRODS EQ GPR,COUNT)
          IF COUNT NE 1 THEN MESSAGE, 'ERROR: ' + GPR + ' not found in the SOE Version structure'
          DTSET = [DTSET,VERSTR.PROD_INFO.(OK).DATASET]
          PSC = [PSC,GET_FILES(DTSET[R], PRODS=GPR+'-'+ALG, PERIODS=PER)]         
        ENDFOR
        IF N_ELEMENTS(PSC) NE N_ELEMENTS(GPRODS) THEN MESSAGE, 'ERROR: The number of files are not correct.'
        IF ~SAME(DTSET) THEN MESSAGE, 'ERROR: The group products ' + STRJOIN(GPRODS,', ') + ' do not have the same dataset.'
        IF HAS(GPR,'PERCENT') THEN PLABEL = 'PHYTO_SIZE_FRACTION' ELSE PLABEL = 'PHYTO_SIZE_CHLOR_A'
        PNG = DIR_PLT + PER + '-' + DTSET[0] + '-' + PLABEL + '-' + ALG + '.png'

        IF FILE_MAKE(PSC,PNG,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE

        W = WINDOW(DIMENSIONS=[768,341],BUFFER=BUFFER)
        CBAR, SCL, OBJ=W, FONT_SIZE=12, CB_TYPE=3, CB_POS=[0.15,0.15,0.85,0.22], CB_TITLE=CB_TITLE, CB_TICKSN=CB_TICKS, PAL=PAL

        PRODS_2PNG,PSC[0],SPROD=SCL,MAPP=MP,OUTLINE=OUTLINE,OUT_COLOR=OCOLOR,/CURRENT,IMG_POS=[0,  85,256,341],/DEVICE,PAL=PAL
        PRODS_2PNG,PSC[1],SPROD=SCL,MAPP=MP,OUTLINE=OUTLINE,OUT_COLOR=OCOLOR,/CURRENT,IMG_POS=[256,85,512,341],/DEVICE,PAL=PAL
        PRODS_2PNG,PSC[2],SPROD=SCL,MAPP=MP,OUTLINE=OUTLINE,OUT_COLOR=OCOLOR,/CURRENT,IMG_POS=[512,85,768,341],/DEVICE,PAL=PAL

        TM = TEXT(0.01,0.95,'Microplankton',FONT_SIZE=12,FONT_STYLE='BOLD')
        TN = TEXT(0.34,0.95,'Nanoplankton',FONT_SIZE=12,FONT_STYLE='BOLD')
        TP = TEXT(0.68,0.95,'Picoplankton',FONT_SIZE=12,FONT_STYLE='BOLD')

        W.SAVE, PNG
        W.CLOSE
        PFILE, PNG
      ENDFOR ; GROUP_PRODS
    ENDFOR ; COMP_PERIODS
        
        
    ; ===> Make composite movies
    DIR_MOV = VERSTR.DIRS.DIR_MOVIE
    VPRODS = TAG_NAMES(VERSTR.PROD_INFO)
    ALG = VALIDS('ALGS',VERSTR.PROD_INFO.MICRO.PROD)
    GROUP_PRODS = LIST([['MICRO','NANO','PICO']+'-'+ALG],[['MICRO','NANO','PICO']+'_PERCENTAGE-'+ALG])
    SCL_PRODS = ['CHLOR_A_0.01_10','NUM_0_1']
    CB_TITLES = [UNITS('CHLOROPHYLL'),'Fraction of Total ' + UNITS('CHLOROPHYLL',/NO_UNIT)]
    NTICKS = [10,10]
    PAL='PAL_DEFAULT'
    DCOLOR='WHITE'
    OUTLINE = VERSTR.INFO.SUBAREA_OUTLINE
    OCOLOR='BLACK'

    FOR M=0, N_ELEMENTS(MOV_PERIOD)-1 DO BEGIN
      PER = MOV_PERIOD[M]
      CASE PER OF
        'WEEK': NDATES = 52
        'MONTH': NDATES = 12
      ENDCASE
      FOR G=0, N_ELEMENTS(GROUP_PRODS)-1 DO BEGIN
        SCL = SCL_PRODS[G]
        CB_TITLE = CB_TITLES[G]
        CB_TICKS = NTICKS[G]
        GPRODS = GROUP_PRODS[G]
        PSCFILES = []
        DTSET = []
        FOR R=0, N_ELEMENTS(GPRODS)-1 DO BEGIN
          GPR = VALIDS('PRODS',GPRODS[R])
          OK = WHERE(VPRODS EQ GPR,COUNT)
          IF COUNT NE 1 THEN MESSAGE, 'ERROR: ' + GPR + ' not found in the SOE Version structure'
          DTSET = [DTSET,VERSTR.PROD_INFO.(OK).DATASET]
          PSCFILES = [PSCFILES,GET_FILES(DTSET[R], PRODS=GPR+'-'+ALG, PERIODS=PER)]
        ENDFOR
        IF N_ELEMENTS(PSCFILES) NE N_ELEMENTS(GPRODS)*NDATES THEN MESSAGE, 'ERROR: The number of files are not correct.'
        IF ~SAME(DTSET) THEN MESSAGE, 'ERROR: The group products ' + STRJOIN(GPRODS,', ') + ' do not have the same dataset.'
        IF HAS(GPR,'PERCENT') THEN PLABEL = 'PHYTO_SIZE_FRACTION' ELSE PLABEL = 'PHYTO_SIZE_CHLOR_A'
        DIR_PLT = DIR_MOV + PLABEL + SL & DIR_TEST, DIR_PLT
        
        MOV = DIR_MOV + PER + '-' + DTSET[0] + '-' + PLABEL + '-' + ALG + '.webm'

        IF FILE_MAKE(PSCFILES,MOV,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
        FP = PARSE_IT(PSCFILES,/ALL)
        B = WHERE_SETS(FP.PERIOD)
        PNGS = []
        FOR S=0, N_ELEMENTS(B)-1 DO BEGIN
          SUBS = WHERE_SETS_SUBS(B[S])
          FF = FP[SUBS]
          MF = FF[WHERE(STRPOS(FF.PROD,'MICRO') GE 0,/NULL)].FULLNAME
          NF = FF[WHERE(STRPOS(FF.PROD,'NANO') GE 0,/NULL)].FULLNAME
          PF = FF[WHERE(STRPOS(FF.PROD,'PICO') GE 0,/NULL)].FULLNAME
          PSC = [MF,NF,PF]
          
          PNG = DIR_PLT + FF[0].PERIOD + '-' + DTSET[0] + '-' + PLABEL + '-' + ALG + '-COMPOSITE.png'
          PNGS = [PNGS,PNG]
          IF FILE_MAKE(PSC,PNG,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
          
          MONTH = MONTH_NAMES(FF[0].MONTH_START)
          
          W = WINDOW(DIMENSIONS=[768,380],BUFFER=BUFFER)
          TXT = TEXT(0.5,0.92,MONTH,ALIGNMENT=0.5,FONT_STYLE='BOLD',FONT_SIZE=20)
          CBAR, SCL, OBJ=W, FONT_SIZE=12, CB_TYPE=3, CB_POS=[0.15,0.12,0.85,0.19], CB_TITLE=CB_TITLE, CB_TICKSN=CB_TICKS, PAL=PAL
  
          PRODS_2PNG,PSC[0],SPROD=SCL,MAPP=MP,OUTLINE=OUTLINE,OUT_COLOR=0,/CURRENT,IMG_POS=[0,  85,256,341],/DEVICE,PAL=PAL
          PRODS_2PNG,PSC[1],SPROD=SCL,MAPP=MP,OUTLINE=OUTLINE,OUT_COLOR=0,/CURRENT,IMG_POS=[256,85,512,341],/DEVICE,PAL=PAL
          PRODS_2PNG,PSC[2],SPROD=SCL,MAPP=MP,OUTLINE=OUTLINE,OUT_COLOR=0,/CURRENT,IMG_POS=[512,85,768,341],/DEVICE,PAL=PAL
  
          TM = TEXT(0.01,0.84,'Microplankton',FONT_SIZE=12,FONT_STYLE='BOLD')
          TN = TEXT(0.35,0.84,'Nanoplankton',FONT_SIZE=12,FONT_STYLE='BOLD')
          TP = TEXT(0.68,0.84,'Picoplankton',FONT_SIZE=12,FONT_STYLE='BOLD')
  
          W.SAVE, PNG
          W.CLOSE
          PFILE, PNG
        ENDFOR ; PERIOD SUBSETS 
        FPS = 15
        MOVIE, PNGS, MOVIE_FILE=MOV, FRAME_SEC=FPS
      ENDFOR ; GROUP_PRODS
    ENDFOR ; MOV_PERIODS    
        
  ENDFOR ; VERSION    


END ; ***************** End of SOE_PHYTOSIZE_PLOT *****************
